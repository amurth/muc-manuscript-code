#!/bin/env julia

using CLI

const PAIRED = 0x1
const CONCORDANT = 0x2
const UNALIGNED = 0x4
const MATE_UNALIGNED = 0x8
const REVERSED = 0x10
const MATE_REVERSED = 0x20
const FIRST_MATE = 0x40
const SECOND_MATE = 0x80
const SECONDARY = 0x100
const FAIL_QC = 0x200
const DUPLICATE = 0x400
const SUPPLEMENTARY = 0x800

function references(bam_path)
	for line in eachline(`samtools view -H $(bam_path)`)
		m = match(r"@SQ\tSN:(.+)\tLN:(\d+)", line)
		if m == nothing; continue; end
		println(join(m.captures, '\t'))
	end
end

function discordant_pairs(bam_path, max_frag_size::Int; orientation="fr", min_mapq=10)
	# TODO: Orientation checks should be made more strict
	expect_same_strand = (orientation == "ff")
	for line in eachline(`samtools view -q $(min_mapq) -f $(PAIRED) -F $(UNALIGNED | MATE_UNALIGNED | SECONDARY | DUPLICATE | SUPPLEMENTARY) $(bam_path)`)
		c = split(line, '\t'); flags = parse(Int, c[2])
		fragsize = abs(parse(Int, c[9]))
		if c[7] == "=" && fragsize <= max_frag_size &&
			(flags & REVERSED == flags & MATE_REVERSED) == expect_same_strand
			continue
		end
		print(line)
	end
end

function error_rate(sam_path)
	spileup, _ = open(pipeline(`samtools mpileup -d 1000000 -A -R -sB -q0 -f /home/annalam/organisms/homo_sapiens/hg19.fa $(sam_path)`,
		`/home/annalam/tools/pypette/compiled/spileup 0 10`))
	N = 10000000; n = 0
	alt_fracs = zeros(Float32, N)
	for line in eachline(spileup)
		cols = split(rstrip(line), '\t')
		if length(cols) < 4; continue; end
		alleles = split(cols[4], ' ')
		ref_total = 0; alt_total = 0
		for k in 1:3:length(alleles)
			if alleles[k] == "."
				ref_total += parse(Int32, alleles[k+1])
			else
				alt_total += parse(Int32, alleles[k+1])
			end
		end
		if ref_total + alt_total < 1000; continue; end
		n += 1
		alt_fracs[n] = alt_total / (ref_total + alt_total)
		#println(alleles)
		#println([ref_total alt_total])
		if n >= N; break; end
		#if n % 1000 == 0; println(n); end
	end

	alt_fracs = alt_fracs[1:n]
	error_rate = median(alt_fracs) * 100
	println("$(sam_path): $(error_rate)%")
end

function compact(sam_path::String)
	id_counter = 1
	short_id = Dict{ASCIIString, Int}()
    sam_file = sam_path == "-" ? STDIN : open(sam_path)
	for line in eachline(sam_file)
		if startswith(line, '@')
			print(line); continue
		end
		c = split(line, '\t')
		rid = c[1]
		if length(rid) >= 2 && rid[end-1] == '/'; rid = rid[1:end-2]; end
		new_id = get(short_id, rid, 0)
		if new_id > 0
			delete!(short_id, rid)
		else
			new_id = id_counter
			id_counter += 1
			short_id[rid] = new_id
		end
		c[1] = "$new_id"
		c[11] = "*"
		print(join(c, '\t'))
	end
end

function check_indexes()
	bam_files = [f for f in readdir() if endswith(f, ".bam")]
	for bam_file in bam_files
		if !isfile("$(bam_file).bai")
			println("BAM file $(bam_file) is missing an index.")
		elseif mtime(bam_file) > mtime("$(bam_file).bai")
			println("BAM index file $(bam_file).bai is older than the corresponding BAM file.")
		end
	end
end

subcommands(references, discordant_pairs, compact, check_indexes)
